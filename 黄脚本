-- 加载Orion库（增加错误防护）
local OrionLib
local success, err = pcall(function()
    OrionLib = loadstring(game:HttpGet("https://pastebin.com/raw/FUEx0f3G"))()
end)
if not success then
    warn("Orion库加载失败: " .. err)
    return
end

local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")

-- 工具函数：创建圆形边角（增加安全检查）
local function makeRound(obj, radius)
    if not obj or not obj:IsA("GuiObject") then return end -- 只对有效GUI对象生效
    local corner = Instance.new("UICorner")
    corner.CornerRadius = radius or UDim.new(0.5, 0) -- 默认正圆形
    corner.Parent = obj
    return corner
end

-- 北京时间显示面板
local LBLG = Instance.new("ScreenGui")
LBLG.Name = "LBLG"
LBLG.Parent = game.CoreGui
LBLG.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
LBLG.Enabled = true

local LBL = Instance.new("TextLabel")
LBL.Name = "LBL"
LBL.Parent = LBLG
LBL.BackgroundTransparency = 1
LBL.BorderSizePixel = 0
LBL.Position = UDim2.new(0.75, 0, 0.01, 0)
LBL.Size = UDim2.new(0, 150, 0, 20)
LBL.Font = Enum.Font.GothamSemibold
LBL.Text = "加载中..."
LBL.TextColor3 = Color3.new(1, 1, 1)
LBL.TextSize = 14
LBL.RichText = true
LBL.ClipsDescendants = true

-- 彩色时间逻辑
local rainbowColors = {
    "<font color='#FF6B6B'>", "<font color='#FFD166'>", 
    "<font color='#06D6A0'>", "<font color='#118AB2'>", "<font color='#9B5DE5'>"
}
local colorIndex = 1
local colorTimer = 0
local gradientDuration = 1.5

local function HeartbeatUpdate(deltaTime)
    colorTimer += deltaTime
    if colorTimer >= gradientDuration then
        colorIndex = colorIndex % #rainbowColors + 1
        colorTimer = 0
    end
    LBL.Text = rainbowColors[colorIndex] .. "北京时间: " .. os.date("%H:%M:%S") .. "</font>"
end
RunService.Heartbeat:Connect(HeartbeatUpdate)

-- 创建主窗口（圆形风格配置）
local Window = OrionLib:MakeWindow({
    Name = "黄脚本",
    HidePremium = false,
    SaveConfig = true,
    IntroText = "黄脚本 - 功能面板",
    ConfigFolder = "黄脚本",
    Theme = "Dark",
    Icon = "rbxassetid://4483345998"
})

-- 欢迎通知（增加错误防护）
pcall(function()
    StarterGui:SetCore("SendNotification", {
        Title = "黄脚本",
        Text = "欢迎使用黄脚本 - 功能已加载",
        Duration = 4,
        Icon = "rbxassetid://4483345998"
    })
end)

-- 作者信息标签页
local AuthorTab = Window:MakeTab({
    Name = "作者信息",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

AuthorTab:AddParagraph("作者", "小黄")
AuthorTab:AddParagraph("作者QQ", "1357377308")
AuthorTab:AddParagraph("QQ群", "543121803")

-- 圆形按钮生成器（修复交互逻辑）
local function addRoundButton(tab, config)
    local btn = tab:AddButton(config)
    if btn.Instance and btn.Instance:IsA("GuiButton") then -- 确认是按钮对象
        btn.Instance.Size = UDim2.new(0, 120, 0, 36)
        makeRound(btn.Instance)
        
        -- 增加悬停效果（修复潜在内存泄漏）
        local hover = Instance.new("UIScale")
        hover.Scale = 1
        hover.Parent = btn.Instance
        
        -- 存储事件连接，便于清理
        local enterConn = btn.Instance.MouseEnter:Connect(function() 
            hover.Scale = 1.05 
        end)
        local leaveConn = btn.Instance.MouseLeave:Connect(function() 
            hover.Scale = 1 
        end)
        
        -- 按钮被移除时断开连接
        btn.Instance.AncestryChanged:Connect(function(_, parent)
            if not parent then
                enterConn:Disconnect()
                leaveConn:Disconnect()
            end
        end)
    end
    return btn
end

-- 作者信息页按钮（修复复制功能）
addRoundButton(AuthorTab, {
    Name = "复制作者QQ",
    Callback = function()
        pcall(function() -- 兼容不支持复制的环境
            setclipboard("1357377308")
            OrionLib:MakeNotification({Name = "成功", Content = "QQ已复制", Time = 2})
        end)
    end,
    Color = Color3.fromRGB(70, 130, 255)
})

addRoundButton(AuthorTab, {
    Name = "复制QQ群",
    Callback = function()
        pcall(function()
            setclipboard("543121803")
            OrionLib:MakeNotification({Name = "成功", Content = "QQ群号已复制", Time = 2})
        end)
    end,
    Color = Color3.fromRGB(100, 200, 100)
})

-- 玩家信息标签页（修复注入器信息获取）
local PlayerTab = Window:MakeTab({
    Name = "玩家信息",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- 安全获取注入器名称（避免函数未定义错误）
local executorName = "未知"
pcall(function()
    if identifyexecutor then
        executorName = identifyexecutor() or "未知"
    end
end)

PlayerTab:AddParagraph("您的用户名", player.Name)
PlayerTab:AddParagraph("您的ID", tostring(player.UserId))
PlayerTab:AddParagraph("注入器", executorName)
PlayerTab:AddParagraph("服务器ID", tostring(game.GameId))

-- 玩家功能标签页
local FunctionTab = Window:MakeTab({
    Name = "玩家功能",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local OtherSection = FunctionTab:AddSection({Name = "其他功能"})

-- 圆形开关（夜视模式）
local nightToggle = FunctionTab:AddToggle({
    Name = "夜视模式",
    Default = false,
    Callback = function(Value)
        -- 验证Lighting服务有效性
        if Lighting then
            Lighting.Ambient = Value and Color3.new(0.5, 0.5, 0.5) or Color3.new(0, 0, 0)
            Lighting.Brightness = Value and 2 or 1
            OrionLib:MakeNotification({
                Name = Value and "夜视开启" or "夜视关闭",
                Content = Value and "环境亮度已提升" or "环境亮度已恢复",
                Time = 1.5
            })
        end
    end,
    Color = Color3.fromRGB(255, 165, 0)
})

-- 优化开关圆形样式（延迟确保控件加载）
task.delay(0.1, function()
    if nightToggle.Instance then
        local switch = nightToggle.Instance:FindFirstChild("Switch", true) -- 深度查找
        if switch then
            makeRound(switch, UDim.new(0.3, 0))
        end
        local handle = nightToggle.Instance:FindFirstChild("Handle", true)
        if handle then
            handle.Size = UDim2.new(0, 20, 0, 20)
            makeRound(handle)
        end
    end
end)

-- 脚本中心标签页（修复加载逻辑）
local ScriptCenterTab = Window:MakeTab({
    Name = "脚本中心",
    Icon = "rbxassetid://4483346000",
    PremiumOnly = false
})

-- 修复重复加载问题（使用外部变量存储状态）
local isScriptLoading = false
addRoundButton(ScriptCenterTab, {
    Name = "加载皮脚本",
    Callback = function()
        if isScriptLoading then
            return OrionLib:MakeNotification({Name = "提示", Content = "加载中，请稍候...", Time = 2})
        end
        
        isScriptLoading = true
        OrionLib:MakeNotification({Name = "开始加载", Content = "正在加载皮脚本...", Time = 3})
        
        task.spawn(function()
            local success, err = pcall(function()
                getgenv().XiaoPi = "皮脚本QQ群1002100032" 
                loadstring(game:HttpGet("https://raw.githubusercontent.com/xiaopi77/xiaopi77/main/QQ1002100032-Roblox-Pi-script.lua"))()
            end)
            
            isScriptLoading = false -- 无论成功失败都重置状态
            if success then
                OrionLib:MakeNotification({Name = "加载成功", Content = "皮脚本已加载完成！", Time = 3})
            else
                OrionLib:MakeNotification({Name = "加载失败", Content = "错误: " .. err, Time = 3})
            end
        end)
    end,
    Color = Color3.fromRGB(123, 104, 238)
})

-- 主窗口圆形化（延迟确保窗口初始化）
OrionLib:Init()
task.delay(0.1, function()
    if Window.Instance then
        local mainFrame = Window.Instance:FindFirstChild("MainFrame", true)
        if mainFrame then
            makeRound(mainFrame, UDim.new(0.08, 0))
        end
    end
end)
