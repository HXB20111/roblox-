-- 依赖库加载（增加防失效备用方案）
local OrionLib
local success, err = pcall(function()
    OrionLib = loadstring(game:HttpGet("https://pastebin.com/raw/FUEx0f3G"))()
end)
if not success then
    warn("默认Orion库加载失败，尝试备用链接：", err)
    OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Orion-UI-Library/Orion/main/source"))()
end

local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local UIS = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

-- 核心工具：全局圆角配置（统一管理圆角大小）
local ROUND_RADIUS = UDim.new(0.5, 0) -- 正圆（如需调整，改这里统一生效）
local function applyRound(instance)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = ROUND_RADIUS
    corner.Parent = instance
    return corner
end

-- 时间显示模块（独立封装 + 错误防护）
local TimeUI = {} do
    TimeUI.Gui = Instance.new("ScreenGui")
    TimeUI.Gui.Name = "TimeDisplay"
    TimeUI.Gui.Parent = game.CoreGui

    TimeUI.Label = Instance.new("TextLabel")
    TimeUI.Label.Parent = TimeUI.Gui
    TimeUI.Label.BackgroundTransparency = 1
    TimeUI.Label.Size = UDim2.new(0, 150, 0, 24)
    TimeUI.Label.Position = UDim2.new(0.75, 0, 0.01, 0)
    TimeUI.Label.Font = Enum.Font.GothamSemibold
    TimeUI.Label.TextColor3 = Color3.new(1, 1, 1)
    TimeUI.Label.TextSize = 16
    TimeUI.Label.RichText = true
    applyRound(TimeUI.Label) -- 时间面板圆角

    -- 彩虹渐变逻辑
    local colors = {
        "<font color='#FF6B6B'>", "<font color='#FFD166'>", 
        "<font color='#06D6A0'>", "<font color='#118AB2'>", "<font color='#9B5DE5'>"
    }
    local colorIndex = 1
    local colorTimer = 0
    local gradientSpeed = 1.2 -- 加快渐变节奏

    TimeUI.Update = function(delta)
        colorTimer += delta
        if colorTimer >= gradientSpeed then
            colorIndex = (colorIndex % #colors) + 1
            colorTimer = 0
        end
        TimeUI.Label.Text = colors[colorIndex] 
            .. "北京时间: " .. os.date("%H:%M:%S") .. "</font>"
    end
    RunService.Heartbeat:Connect(TimeUI.Update)
end

-- 主窗口配置（深度圆角优化 + 兼容性修复）
local Window = OrionLib:MakeWindow({
    Name = "黄脚本",
    HidePremium = false,
    SaveConfig = true,
    IntroText = "黄脚本 - 功能面板",
    ConfigFolder = "黄脚本",
    Theme = "Dark",
    Icon = "rbxassetid://4483345998"
})

-- 窗口元素延迟优化（确保初始化完成后处理圆角）
task.delay(0.2, function()
    -- 主窗口圆角
    if Window.Instance then
        applyRound(Window.Instance)
        
        -- 顶部栏按钮强制圆形（覆盖默认样式）
        local topBar = Window.Instance:FindFirstChild("TopBar")
        if topBar then
            for _, btn in ipairs(topBar:GetChildren()) do
                if btn:IsA("GuiButton") then
                    applyRound(btn)
                    btn.Size = UDim2.new(0, 44, 0, 44) -- 更大的圆形点击区
                end
            end
        end
    end
end)

-- 通知系统强化（统一样式 + 错误防护）
local function showNotify(title, content, time)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = content,
            Duration = time or 3,
            Icon = "rbxassetid://4483345998",
            Button1 = "确认",
        })
    end)
end
showNotify("黄脚本", "欢迎使用！功能已加载", 4)

-- 作者信息标签页（组件化封装）
local AuthorTab = Window:MakeTab({
    Name = "作者信息",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AuthorInfo = {
    {Label = "作者", Value = "小黄"},
    {Label = "作者QQ", Value = "1357377308"},
    {Label = "QQ群", Value = "待更新"},
}

for _, info in ipairs(AuthorInfo) do
    AuthorTab:AddParagraph(info.Label, info.Value)
end

-- 圆形按钮工厂（复用逻辑 + 动画修复）
local function createRoundButton(tab, config)
    local btn = tab:AddButton(config)
    if btn.Instance and btn.Instance:IsA("GuiButton") then
        applyRound(btn.Instance)
        btn.Instance.Size = UDim2.new(0, 130, 0, 44) -- 更大更圆润
        -- 弹性动画（按下缩小，松开回弹）
        local spring = UISpring.new(btn.Instance, {
            Goal = {Scale = 1},
            Speed = 20,
            Damper = 0.5
        })
        btn.Instance.MouseButton1Down:Connect(function()
            spring.Goal = {Scale = 0.95}
        end)
        btn.Instance.MouseButton1Up:Connect(function()
            spring.Goal = {Scale = 1}
        end)
    end
    return btn
end

-- 交互按钮（修复setclipboard兼容性）
createRoundButton(AuthorTab, {
    Name = "复制作者QQ",
    Callback = function()
        pcall(function()
            setclipboard("1357377308")
            showNotify("复制成功", "作者QQ已复制到剪贴板", 2)
        end)
    end,
    Color = Color3.fromRGB(70, 130, 255)
})

createRoundButton(AuthorTab, {
    Name = "复制QQ群",
    Callback = function()
        pcall(function()
            setclipboard("")
            showNotify("提示", "群号暂未更新", 2)
        end)
    end,
    Color = Color3.fromRGB(100, 200, 100)
})

-- 玩家信息标签页（自动填充信息）
local PlayerTab = Window:MakeTab({
    Name = "玩家信息",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

PlayerTab:AddParagraph("用户名", player.Name)
PlayerTab:AddParagraph("用户ID", tostring(player.UserId))
PlayerTab:AddParagraph("注入器", identifyexecutor and identifyexecutor() or "未知") -- 修复函数调用
PlayerTab:AddParagraph("服务器ID", tostring(game.GameId))

-- 玩家功能标签页（控件系统优化）
local FunctionTab = Window:MakeTab({
    Name = "玩家功能",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- 滑块工厂（统一圆形处理 + 错误防护）
local function createRoundSlider(tab, config)
    local slider = tab:AddSlider(config)
    if slider.Instance then
        -- 轨道圆角
        local track = slider.Instance:FindFirstChild("Track")
        if track then
            applyRound(track)
        end
        
        -- 手柄圆形+磁吸动画
        local handle = slider.Instance:FindFirstChild("Handle")
        if handle and handle:IsA("GuiObject") then
            handle.Size = UDim2.new(0, 28, 0, 28)
            applyRound(handle)
            -- 滑动时的弹性反馈
            local handleSpring = UISpring.new(handle, {
                Goal = {Position = handle.Position},
                Speed = 15,
                Damper = 0.6
            })
            slider.Instance.Changed:Connect(function(prop)
                if prop == "AbsolutePosition" then
                    handleSpring.Goal = {Position = handle.Position}
                end
            end)
        end
    end
    return slider
end

-- 移动速度调节（修复空引用）
createRoundSlider(FunctionTab, {
    Name = "移动速度",
    Min = 16,
    Max = 200,
    Default = 16,
    Color = Color3.fromRGB(70, 130, 255),
    Increment = 1,
    ValueName = "单位",
    Callback = function(val)
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = val
            showNotify("设置成功", "移动速度已调整为 "..val, 1.5)
        end
    end
})

-- 跳跃高度调节（修复空引用）
createRoundSlider(FunctionTab, {
    Name = "跳跃高度",
    Min = 50,
    Max = 200,
    Default = 50,
    Color = Color3.fromRGB(100, 200, 100),
    Increment = 1,
    ValueName = "单位",
    Callback = function(val)
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = val
            showNotify("设置成功", "跳跃高度已调整为 "..val, 1.5)
        end
    end
})

-- 夜视模式开关（圆形+过渡动画 + 修复空引用）
local NightVisionToggle = FunctionTab:AddToggle({
    Name = "夜视模式",
    Default = false,
    Callback = function(enabled)
        Lighting.Ambient = enabled and Color3.new(0.5, 0.5, 0.5) or Color3.new(0, 0, 0)
        Lighting.Brightness = enabled and 2 or 1
        showNotify(
            enabled and "夜视开启" or "夜视关闭", 
            enabled and "环境亮度已提升" or "环境亮度已恢复", 
            1.5
        )
    end,
    Color = Color3.fromRGB(255, 165, 0)
})

-- 开关样式强化（修复空引用）
if NightVisionToggle.Instance then
    local switchBg = NightVisionToggle.Instance:FindFirstChild("Switch")
    local switchHandle = NightVisionToggle.Instance:FindFirstChild("Handle")
    if switchBg then applyRound(switchBg) end
    if switchHandle and switchHandle:IsA("GuiObject") then 
        switchHandle.Size = UDim2.new(0, 24, 0, 24)
        applyRound(switchHandle)
    end
end

-- 脚本中心标签页（加载逻辑优化 + 错误处理）
local ScriptCenterTab = Window:MakeTab({
    Name = "脚本中心",
    Icon = "rbxassetid://4483346000",
    PremiumOnly = false
})

createRoundButton(ScriptCenterTab, {
    Name = "加载皮脚本",
    Callback = function()
        -- 防重复加载锁
        static loadLock = false
        if loadLock then 
            return showNotify("提示", "脚本加载中，请稍后...", 2) 
        end
        loadLock = true
        
        showNotify("加载中", "正在获取皮脚本资源...", 3)
        task.spawn(function()
            local success, err = pcall(function()
                getgenv().XiaoPi = "皮脚本QQ群1002100032" 
                loadstring(game:HttpGet("https://raw.githubusercontent.com/xiaopi77/xiaopi77/main/QQ1002100032-Roblox-Pi-script.lua"))()
            end)
            loadLock = false
            if success then
                showNotify("加载成功", "皮脚本已就绪", 3)
            else
                showNotify("加载失败", "错误: "..tostring(err), 3)
            end
        end)
    end,
    Color = Color3.fromRGB(123, 104, 238)
})

-- 初始化Orion库（确保最后执行）
OrionLib:Init()
